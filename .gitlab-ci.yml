---
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_VERSION: "18.06"
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  INFRA_GIT_DEPLOY_VERSION: "1.0"
  INFRA_GIT_TAG_RELEASE_VERSION: "1.0"
  INFRA_HELM_VERSION: "1.0"
  INFRA_CURL_VERSION: "1.0"
  CLUSTER_NAME: "dev"
  APP_NAME: "www"
  FRONT_PORT: 80
  FEATURE_ENVIRONMENT_NAME: "feature"
  MASTER_ENVIRONMENT_NAME: "master"
  PREPROD_ENVIRONMENT_NAME: "prep"
  PROD_ENVIRONMENT_NAME: "prod"
  HELM_CHART_VERSION: "v2.1.0"

stages:
  - "Code Quality"
  - "Prepare"
  - "Registration"
  - "Deploy dev"
  - "Send Url to GitHub (dev)"
  - "Make a new release"
  - "Deploy prod"
  - "Send Url to GitHub (prod)"

.quality_stage: &quality_stage
  stage: "Code Quality"
  image: node:12-alpine
  before_script:
    - yarn --frozen-lockfile

Quality tests:
  <<: *quality_stage
  script:
    - yarn lint

###########################################
###               PREPARE               ###
###########################################

#
.get_github_id_stage: &get_github_id_stage
  stage: "Prepare"
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  before_script:
    - envsubst < k8s/scripts/get-deploy-id.sh > k8s/scripts/get-github-deploy-id.sh
  script:
    - sh k8s/scripts/get-github-deploy-id.sh
  artifacts:
    paths:
      - github_deploy_id
#

Get Github Id (dev):
  <<: *get_github_id_stage
  environment:
    name: $DEV_ENVIRONMENT_NAME
  only:
    - branches
  except:
    - master

Get Github Id (prod):
  <<: *get_github_id_stage
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
    - tags

###########################################
###       REGISTER DOCKER IMAGES        ###
###########################################

#
.register_stage: &register_stage
  stage: "Registration"
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
    - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || true

#

Register api image with commit sha:
  <<: *register_stage
  variables:
    CONTEXT: .
    DOCKERFILE_PATH: Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE
  script:
    - echo "Build $IMAGE_NAME:$CI_COMMIT_SHA from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA"
    - docker build --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA -t $IMAGE_NAME:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
    - docker push $IMAGE_NAME
  except:
    - /^v.*/

Register api image with release version:
  <<: *register_stage
  variables:
    CONTEXT: .
    DOCKERFILE_PATH: Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE
  script:
    - echo "Build $IMAGE_NAME:${RELEASE_VERSION}"
    - docker build -t $IMAGE_NAME:${RELEASE_VERSION} -f $DOCKERFILE_PATH $CONTEXT
    - docker push $IMAGE_NAME:${RELEASE_VERSION}
  only:
    - /^v.*/

###########################################
###            DEPLOY TO K8S            ###
###########################################

#
.deploy_stage: &deploy_stage
  image:
    name: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/helm:${INFRA_HELM_VERSION}
  variables: &deploy_stage_variables
    PORT: ${FRONT_PORT}
  script:
    - helm init --client-only
    - helm repo add mas-incubateur https://github.com/SocialGouv/helm-charts/releases/download/${HELM_CHART_VERSION}
    - envsubst < .gitlab-ci/values.yaml > .gitlab-ci/values-${APP_NAME}.yaml
    - cat .gitlab-ci/values-${APP_NAME}.yaml
    - helm upgrade --install --wait --namespace www-${NAMESPACE} --values=.gitlab-ci/values-${APP_NAME}.yaml ${HELM_RELEASE_NAME} mas-incubateur/webapp
  allow_failure: false
#

Deploy feature:
  stage: "Deploy dev"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    PORT: ${FRONT_PORT}
    NAMESPACE: ${FEATURE_ENVIRONMENT_NAME}
    LETSENCRYPT_ISSUER: letsencrypt-staging
    IMAGE_TAG: ${CI_COMMIT_SHA}
  environment:
    name: ${FEATURE_ENVIRONMENT_NAME}-${CLUSTER_NAME}
    url: https://${INGRESS_ENVIRONMENT_PREFIX}${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - HASH_BRANCH_NAME=$(printf "${CI_COMMIT_REF_NAME}" | sha1sum | cut -c1-5)
    - env
    - export INGRESS_ENVIRONMENT_PREFIX=${HASH_BRANCH_NAME}. # "." at the end of line is needed to deploy into hors prod environment
    - export HELM_RELEASE_NAME=${APP_NAME}-${HASH_BRANCH_NAME}-${FEATURE_ENVIRONMENT_NAME}
    - export HASH_BRANCH_NAME=-${HASH_BRANCH_NAME}
  except:
    - master
    - /^v.*/

Deploy master:
  stage: "Deploy dev"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    PORT: ${FRONT_PORT}
    NAMESPACE: ${MASTER_ENVIRONMENT_NAME}
    HASH_BRANCH_NAME: ""
    INGRESS_ENVIRONMENT_PREFIX: ${MASTER_ENVIRONMENT_NAME}. # "." at the end of line is needed to deploy into hors prod environment
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: ${CI_COMMIT_SHA}
  environment:
    name: ${MASTER_ENVIRONMENT_NAME}-${CLUSTER_NAME}
    url: https://${MASTER_ENVIRONMENT_NAME}.${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - export HELM_RELEASE_NAME=${APP_NAME}-${MASTER_ENVIRONMENT_NAME}
  only:
    - master

Deploy preprod:
  stage: "Deploy dev"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    NAMESPACE: ${PREPROD_ENVIRONMENT_NAME}
    HASH_BRANCH_NAME: ""
    INGRESS_ENVIRONMENT_PREFIX: ${PREPROD_ENVIRONMENT_NAME}. # "." at the end of line is needed to deploy into hors prod environment
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: ${RELEASE_VERSION}
  environment:
    name: ${PREPROD_ENVIRONMENT_NAME}-${CLUSTER_NAME}
    url: https://${PREPROD_ENVIRONMENT_NAME}.${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - export HELM_RELEASE_NAME=${APP_NAME}-${PREPROD_ENVIRONMENT_NAME}
  only:
    - /^v.*/

###########################################
###           RELEASE VERSION           ###
###########################################

Make a new release to deploy to preprod environment:
  stage: "Make a new release"
  image: ${CI_REGISTRY}/${IMAGE_INFRA_BASE_NAME}/curl:${INFRA_CURL_VERSION}
  script:
    - >-
      curl --verbose POST
      https://${GITHUB_TOKEN}@api.github.com/repos/SocialGouv/socialgouv.github.io/git/refs
      --header 'Content-Type:application/json'
      --data '{"ref": "refs/tags/'${RELEASE_VERSION}'", "sha": "'${CI_COMMIT_SHA}'"}'
  when: manual
  only:
    - master

###########################################
###            DEPLOY TO PROD           ###
###########################################

Deploy prod:
  stage: "Deploy prod"
  <<: *deploy_stage
  variables:
    <<: *deploy_stage_variables
    NAMESPACE: ${PROD_ENVIRONMENT_NAME}
    INGRESS_ENVIRONMENT_PREFIX: ""
    LETSENCRYPT_ISSUER: letsencrypt-prod
    IMAGE_TAG: ${RELEASE_VERSION}
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
    url: https://${APP_NAME}.${DOMAIN_NAME}
  before_script:
    - export HELM_RELEASE_NAME=${APP_NAME}-${PROD_ENVIRONMENT_NAME}
  when: manual
  only:
    - /^v.*/

###########################################
###         SEND URL TO GITHUB          ###
###########################################

#
.send_url_to_github_stage: &send_url_to_github_stage
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  script:
    - export DEPLOY_ID=$(cat github_deploy_id)
    - envsubst < k8s/scripts/send-url.sh > k8s/scripts/send-url-to-github.sh
    - sh k8s/scripts/send-url-to-github.sh $CI_COMMIT_REF_NAME
#

Send deployment url to Github (dev):
  <<: *send_url_to_github_stage
  stage: "Send Url to GitHub (dev)"
  before_script:
    - HASH_BRANCH_NAME=$(printf "$CI_COMMIT_REF_NAME" | sha1sum | cut -c1-5)
    - export HASH_BRANCH_NAME=$HASH_BRANCH_NAME
    - export URL=http://$HASH_BRANCH_NAME-www.${CI_ENVIRONMENT_NAME}.social.gouv.fr/
  environment:
    name: $DEV_ENVIRONMENT_NAME
  only:
    - branches
  except:
    - master

Send deployment url to Github (prod):
  <<: *send_url_to_github_stage
  stage: "Send Url to GitHub (prod)"
  before_script:
    - export URL=http://www.${CI_ENVIRONMENT_NAME}/
  environment:
    name: $PROD_ENVIRONMENT_NAME
  only:
    - tags
